apiVersion: v1
kind: ConfigMap
metadata:
  name: my-config
data:
  key1: FROM CONFIG MAP
  keyFile: |
    Bonjour tout le mondee.
    On fait la formation k8s.
    k8s c'eest de la bombe.
  keyFile2: |
    Bonjour tout le mondee.
    On fait la formation k8s.
    k8s c'eest de la bombe.
---
apiVersion: v1
kind: Secret
metadata:
  name: my-secret
data:
  key1: TW9uIHNlY3JldA==
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-spring-deploy
  annotations:
    kubernetes.io/change-cause: 'Mise a jour livenessProbe v0.0.3'
  labels:
    app: my-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-pod
      stack: spring
  template:
    metadata:
      name: my-spring-pod
      labels:
        app: my-pod
        stack: spring
    spec:
      containers:
        - name: my-spring-pod
          image: k8s-spring:0.0.3
          env:
            - name: CONFIG_ENV1
              valueFrom:
                configMapKeyRef:
                  name: my-config
                  key: key1
            - name: SECRET_ENV1
              valueFrom:
                secretKeyRef:
                  key: key1
                  name: my-secret
          volumeMounts:
            - mountPath: /test/folder/
              name: mon-volume
      volumes:
        - name: mon-volume
          configMap:
            name: my-config
            items:
              - key: keyFile
                path: formation.txt
              - key: keyFile2
                path: formation2.txt
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-node-deploy
  annotations:
    kubernetes.io/change-cause: 'Mise a jour livenessProbe v0.0.3'
  labels:
    app: my-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-pod
      stack: node
  template:
    metadata:
      name: my-node-pod
      labels:
        app: my-pod
        stack: node
    spec:
      containers:
        - name: my-node-pod
          image: k8s-node:0.0.3
          securityContext:
            runAsNonRoot: true
          lifecycle:
            postStart:
              httpGet:
                port: 80
                path: /test
            preStop:
              httpGet:
                port: 8080
                path: /test
          env:
            - name: SERVER_PORT
              value: '8080'
            - name: CONFIG_ENV1
              value: 'FROM YAML'
            - name: SECRET_ENV1
              valueFrom:
                secretKeyRef:
                  key: key1
                  name: my-secret
            - name: ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

          envFrom:
            - configMapRef:
                name: my-config
---
apiVersion: v1
kind: Service
metadata:
  name: my-node-service
  labels:
    app: my-node-service
spec:
  type: NodePort
  selector:
    app: my-pod
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30001
